<!-- 
  Turtlebot global navigation simulation to test the WCF (World Canvas Framework)
  - stage
  - move_base
  - static map
  - amcl
  - ar_track
  - rviz view
  - virtual sensor
  - world canvas server
  - world canvas client
    > load map
    > load annotations
  WARN: don't forget to launch populate_world.launch to create the world on WCF database!
 -->
<launch>
  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
  <arg name="eband" default="false"/>
  
  <arg name="py_client_lib" default="false"/>
  <arg name="cpp_client_lib" default="true"/>

  <!-- Use the same world id you passed to populate_world.launch -->
  <arg name="world" default="Maze world"/>
  <arg name="is_elastic_planner" default="false"/>
  <arg name="initial_pose_x" default="2.0"/>
  <arg name="initial_pose_y" default="2.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <param name="/use_sim_time" value="true"/>

  <include file="$(find turtlebot_stage)/launch/turtlebot_in_stage.launch">
    <arg name="load_map" value="false"/> <!-- use world canvas instead -->
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    <arg name="eband" value="$(arg eband)"/>
  </include>

  <!-- Virtual sensor -->
  <include file="$(find turtlebot_stage)/launch/includes/virtual_sensor.launch.xml"/>


  <!-- World canvas server -->
  <include file="$(find world_canvas_server)/launch/world_canvas_server.launch">
  	<arg name="debug" value="true"/>
  </include>

  <!-- Publish world elements: make world canvas server publish 2D map and virtual sensor obstacles... -->

  <!-- ...using Python client library -->
  <node if="$(arg py_client_lib)" name="world_canvas_client" pkg="turtlebot_stage" type="publish_world.py">
    <param name="world" value="$(arg world)"/>
  </node>

  <!-- ...using C++ client library -->
  <node if="$(arg cpp_client_lib)" name="map_publisher" pkg="world_canvas_client_examples" type="test_annotation_collection">
    <param name="world"       value="$(arg world)"/>
    <param name="topic_name"  value="map"/>
    <param name="pub_as_list" value="false"/>
    <rosparam param="types">[nav_msgs/OccupancyGrid]</rosparam>
  </node>

  <node if="$(arg cpp_client_lib)" name="wall_publisher" pkg="world_canvas_client_examples" type="test_annotation_collection">
    <param name="world"       value="$(arg world)"/>
    <param name="topic_name"  value="wall_pose_list"/>
    <param name="topic_type"  value="yocs_msgs/WallList"/>
    <param name="pub_as_list" value="true"/>
    <rosparam param="types">[yocs_msgs/Wall]</rosparam>
  </node>
 
  <node if="$(arg cpp_client_lib)" name="column_publisher" pkg="world_canvas_client_examples" type="test_annotation_collection">
    <param name="world"       value="$(arg world)"/>
    <param name="topic_name"  value="column_pose_list"/>
    <param name="topic_type"  value="yocs_msgs/ColumnList"/>
    <param name="pub_as_list" value="true"/>
    <rosparam param="types">[yocs_msgs/Column]</rosparam>
  </node>
</launch>
